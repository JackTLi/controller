# Infinity Ergodox

Name = MDErgo1;
Version = 0.4;
Author = "HaaTa (Jacob Alexander) 2014-2017";
KLL = 0.5;

# Modified Date
Date = 2017-11-26;

########
# NOTE #
########

# Default ScanCode mappings are in rightHand.kll and leftHand.kll
# To change which node you are refering to, set the ConnectId variable
# i.e.
# ConnectId = 0;
# S0x02 : U"A"; # Sets scan code 0x02 on keyboard connected to USB
# ConnectId = 1;
# S0x02 : U"B"; # Sets scan code 0x02 on the first slave node
#
# ConnectId may be set in the previously parsed kll file
# In general you shouldn't have to worry about setting ConnectId unless you want a single configuration file


#
# Defines available to the MDErgo1 Scan Module
#


# Driver Chip
ISSI_Chip_31FL3731 = 1;

# Available ISSI Chips
ISSI_Chips = 1;

# I2C Buses
ISSI_I2C_Buses = 1; # 1 by default

# I2C LED Struct Definition
LED_BufferStruct = "
typedef struct LED_Buffer {
	uint16_t i2c_addr;
	uint16_t reg_addr;
	uint16_t buffer[144];
} LED_Buffer;
volatile LED_Buffer LED_pageBuffer[ ISSI_Chips_define ];
";


# FPS Target
# Each ISSI chip setup has a different optimal framerate.
# This setting specifies a target frame rate. This is sort've like "V-Sync" on monitors.
# So the framerate will not go above this amount.
# If the framerate goes below, ledFPS cli will issue warnings when enabled.
ISSI_FrameRate_ms => ISSI_FrameRate_ms_define;
ISSI_FrameRate_ms = 10; # 1000 / <ISSI_FrameRate_ms> = 100 fps
ISSI_FrameRate_ms = 100; # 1000 / <ISSI_FrameRate_ms> = 100 fps


# LED Default Enable Mask Override
#
# Each LED is represented by a single bit
# See (http://www.issi.com/WW/pdf/31FL3731C.pdf) for details
ISSILedMask1 = "
	0xFF, 0x00, /* C1-1 -> C1-16 */
	0xFF, 0x00, /* C2-1 -> C2-16 */
	0xFF, 0x00, /* C3-1 -> C3-16 */
	0xFF, 0x00, /* C4-1 -> C4-16 */
	0x3F, 0x00, /* C5-1 -> C5-16 */
	0x00, 0x00, /* C6-1 -> C6-16 */
	0x00, 0x00, /* C7-1 -> C7-16 */
	0x00, 0x00, /* C8-1 -> C8-16 */
	0x00, 0x00, /* C9-1 -> C9-16 */
";



### Pixel Buffer Setup ###
# Defines channel mappings, changing the order will affect Pixel definitions

Pixel_Buffer_Size[]    =   0; # Starting channel for each buffer
Pixel_Buffer_Width[]   =  16; # Width of each channel buffer (may be different than effective channel size)
Pixel_Buffer_Length[]  = 144; # Length of each buffer (count, not bytes)
Pixel_Buffer_Buffer[0] = "LED_pageBuffer[0].buffer"; # Pointer to the start of the buffer



### Pixel Display Mapping Parameters ###
Pixel_DisplayMapping_UnitSize = 19; # Default unit spacing in mm
Pixel_DisplayMapping_ColumnSize = 1;
Pixel_DisplayMapping_RowSize = 2;



### Pixel Mapping ###
# Organizes each of the channels into pixels (may, or may not be multi-channel)

# Top Row (1-7)
P[  1](  0:8) : S3;  # D39
P[  2]( 16:8) : S4;  # D40
P[  3]( 32:8) : S5;  # D41
P[  4]( 48:8) : S6;  # D42
P[  5]( 64:8) : S7;  # D43
P[  6](  1:8) : S8;  # D44
P[  7]( 17:8) : S9;  # D45

# 2nd Row (8-14)
P[  8]( 33:8) : S12; # D46
P[  9]( 49:8) : S13; # D47
P[ 10]( 65:8) : S14; # D48
P[ 11](  2:8) : S15; # D49
P[ 12]( 18:8) : S16; # D50
P[ 13]( 34:8) : S17; # D51
P[ 14]( 50:8) : S18; # D52

# 3rd Row (15-20)
P[ 15]( 66:8) : S22; # D53
P[ 16](  3:8) : S23; # D54
P[ 17]( 19:8) : S24; # D55
P[ 18]( 35:8) : S25; # D56
P[ 19]( 51:8) : S26; # D57
P[ 20]( 67:8) : S27; # D58

# 4th Row (21-29)
P[ 21](  4:8) : S28; # D59
P[ 22]( 20:8) : S29; # D60
P[ 23]( 36:8) : S30; # D61
P[ 24]( 52:8) : S31; # D62
P[ 25]( 68:8) : S32; # D63
P[ 26](  5:8) : S33; # D64
P[ 27]( 21:8) : S34; # D65
P[ 28]( 37:8) : S35; # D66
P[ 29]( 53:8) : S36; # D67

# Bottom Row (30-38)
P[ 30]( 69:8) : S37; # D68
P[ 31](  6:8) : S38; # D69
P[ 32]( 22:8) : S39; # D70
P[ 33]( 38:8) : S40; # D71
P[ 34]( 54:8) : S41; # D72
P[ 35](  7:8) : S42; # D73
P[ 36]( 23:8) : S43; # D74
P[ 37]( 39:8) : S44; # D75
P[ 38]( 55:8) : S45; # D76



# LCD Backlight Channel Brightness Override
# There are 3 channels, RGB
# In order to get other colors you must mix the 3 colors
# Each channel is a 16-bit register (65536 levels)
# Technically, this means, the backlight is a 48-bit RGB pixel
# In practice, it may be difficult to get color consistency at times if too bright or too dim
#
# Defaults to 6% brightness, white
STLcdBacklightRed   = 0x0FFF;
STLcdBacklightGreen = 0x0FFF;
STLcdBacklightBlue  = 0x0FFF;

# LCD Image Override
#
# The easiest way to generate this data is using the bitmap2Struct.py script in the STLcd folder
# It will output the necessary uint8_t array to set here
#
STLcdDefaultImage = "
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xd0, 0x68, 0xb0, 0x68, 0x30, 0x18, 0x30, 0x18, 0x2c, 0x38, 0x28, 0xdc, 0x6a, 0xb4, 0xde, 0x28, 0xff, 0xea, 0xbe, 0xfa, 0xac, 0xfc, 0xdc, 0x74, 0xf8, 0xac, 0x08, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xe0, 0xc0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x0f, 0xfe, 0xff, 0xff, 0xfc, 0xc0, 0xe0, 0xc0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x1f, 0x3e, 0xfe, 0xf8, 0xf8, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6e, 0xbb, 0x55, 0xee, 0x58, 0x1e, 0x04, 0x06, 0x80, 0x80, 0x40, 0xf0, 0x5b, 0xad, 0x76, 0xab, 0xdd, 0xb6, 0xff, 0xdd, 0x77, 0xde, 0xfb, 0xef, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe1, 0xf1, 0xf9, 0xf9, 0x7f, 0x3f, 0x1f, 0x1f, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x80, 0x00, 0x03, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x1c, 0xff, 0xff, 0xff, 0xff, 0x81, 0x01, 0x03, 0x07, 0xff, 0xff, 0xff, 0xfc, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xe1, 0x81, 0x03, 0x07, 0xbf, 0xff, 0xff, 0xfc, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf8, 0xff, 0xff, 0xff, 0x0f, 0x7f, 0xff, 0xfc, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5f, 0x6d, 0xb2, 0xdf, 0x68, 0xd0, 0xa0, 0xe3, 0x42, 0xa3, 0xc1, 0x65, 0xb6, 0xdb, 0x6d, 0xaa, 0x7f, 0xda, 0xff, 0xeb, 0xbf, 0xfa, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0e, 0x0f, 0x0f, 0x04, 0x00, 0x03, 0x7f, 0xff, 0xff, 0xff, 0xd7, 0x07, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x00, 0x00, 0x07, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x01, 0x00, 0x01, 0x4f, 0xe7, 0xef, 0xef, 0xe0, 0x07, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xee, 0xcf, 0xc4, 0xca, 0x0f, 0x07, 0x0f, 0x07, 0x00, 0x00, 0x03, 0x07, 0x0f, 0x0f, 0x06, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x19, 0x62, 0x4b, 0x9a, 0x63, 0x66, 0x5b, 0x24, 0x37, 0x0d, 0x0b, 0x0e, 0x07, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
";

